name: Build and Publish Release

on:
  push:
    branches:
      - main
    tags:
      - '^v[0-9]+\.[0-9]+\.[0-9]+$'

jobs:

  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{github.ref}}
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version-file: 'go.mod'

      - name: install dependency
        run: go get -d
      
      - name: test
        run: go test -v ./...


  build:
    
    needs: test
    strategy:
      matrix:
        os: [windows, darwin, linux]
        arch: [amd64, arm64]
        exclude:
          - os: windows
            arch: arm64


    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{github.ref}}

        
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version-file: 'go.mod'
    
      - name: Build
        run: CGO_ENABLED=0 GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} go build -v -o JumpServerSSHClient_${{ matrix.os }}_${{ matrix.arch }}_${{ github.ref_name }} main.go
      
      - name: Archive
        uses: actions/upload-artifact@v2
        with:
          name: JumpServerSSHClient_${{ matrix.os }}_${{ matrix.arch }}_${{ github.ref_name }}
          path: JumpServerSSHClient_${{ matrix.os }}_${{ matrix.arch }}_${{ github.ref_name }}
          
  publish:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        
    
      # Get the previous tag
      - name: Get Previous Tag
        id: get_old_tag
        run: |
          echo "::set-output name=old_tag::$(git describe --abbrev=0 --tags $(git rev-list --tags --skip=1 --max-count=1))"

      - name: Update CHANGELOG
        id: changelog
        uses: requarks/changelog-action@v1
        with:
          token: ${{ github.token }}
          tag: ${{ github.ref_name }}
    
      # Create new Release
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          allowUpdates: true
          draft: false
          makeLatest: true
          name: ${{ github.ref_name }}
          body: ${{ steps.changelog.outputs.changes }}
          token: ${{ github.token }}
        
      # Download and extract the archive artifact from the build job
      - name: Download Build Artifact
        uses: actions/download-artifact@v2
        with:
          name: JumpServerSSHClient*
          path: build/
          
      # Upload all binary files to the newly created release
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: 'build/JumpServerSSHClient*'
          asset_name: '{filename}'
          asset_content_type: application/octet-stream
    
